@page "/product"
@inject ILogger<Products> logger;
@inject IProductService productService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@inject IToastService toastService;

<PageTitle>Products</PageTitle>

<ModuleTitle Title="Products" />
<button class="btn btn-success mb-4" @onclick="@(() => NavigationManager.NavigateTo("/addproduct"))">
    Add Product
</button>

@if (products?.Count > 0)
{
    <div class="products-container">
        @foreach (var product in products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.Images[0]" alt="Product" loading="lazy" width="270" height="210" />
                <div class="card-body">
                    <h4><b>@product.Title</b></h4>
                    <p>@product.Price?.ToString("C", CultureInfo.GetCultureInfo("en-US"))</p>
                    <button title="Edit" class="btn btn-primary mr-2 btn-edit" @onclick="@(()=>EditProduct(product))">
                        <span class="oi oi-pencil"></span>
                    </button>
                    <button title="Eliminar" class="btn btn-danger btn-delete" @onclick="@(()=>DeleteProduct(product))">
                        <span class="oi oi-trash"></span>
                    </button>
                </div>
            </div>
        }
    </div>
}
else
{//si products es nulo o su cuenta es menor igual a cero
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}

@code
{
    private List<Product>? products; // puede ser nulo

    protected override async Task OnInitializedAsync()
    {//OnInitializedAsync: se encarga de asignar los datos iniciales que se vana mostrar en el componente
        await GetProducts();
    }

    //este metodo devuelve una lista de productos
    private async Task GetProducts()
    {
        products = await productService.Get();
    }

    private void EditProduct(Product product)
    {
        NavigationManager.NavigateTo($"/editproduct/{product.Id}");
    }

    private async Task DeleteProduct(Product product)
    {
        // esta alerta viene de JS. Librerias, componentes de js igual lo podemos invocar
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove {product.Title}"))
            return;

        await productService.Delete(product.Id);
        toastService.ShowSuccess("Product Removed");
        await GetProducts();
    }

}