@page "/product"
@inject ILogger<Products> logger;
@inject IProductService productService;
@inject NavigationManager NavigationManager;

<PageTitle>Products</PageTitle>

<ModuleTitle Title="Products" />
<button class="btn btn-dark mb-2" @onclick="@(() => NavigationManager.NavigateTo("/addproduct"))">Add Product</button>

@if (products?.Count > 0)
{
    <div class="products-container">
        @foreach (var product in products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.Images[0]" alt="Product" loading="lazy" width="270" height="210" />
                <div class="card-body">
                    <h4><b>@product.Title</b></h4>
                    <p>@product.Price?.ToString("C")</p>
                    @* <button title="Eliminar" class="btn btn-danger btn-delete" @onclick="@(()=>Delete(product))"><span
            class="oi oi-trash"></span></button> *@
                </div>
            </div>
        }
    </div>
}
else
{//si products es nulo o su cuenta es menor igual a cero
    <p>No hay productos para mostrar</p>
}

@code
{
    private List<Product>? products;  // puede ser nulo

    protected override async Task OnInitializedAsync()
    {//OnInitializedAsync: se encarga de asignar los datos iniciales que se vana  mostrar en el componente
        products = await GetProducts();
    }

    //este metodo devuelve una lista de productos
    private async Task<List<Product>> GetProducts()
    {
        return await productService.Get();
    }

}