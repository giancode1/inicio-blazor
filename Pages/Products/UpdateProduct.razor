@page "/editproduct/{Id:int}"
@inject IProductService productService;
@inject ICategoryService categoryService;
@inject NavigationManager NavigationManager;
@inject IToastService toastService;

<PageTitle>Update-Product-@Id</PageTitle>

<ModuleTitle Title="Update product" />
<button class="btn btn-dark" @onclick="@(() => NavigationManager.NavigateTo("/product"))">Go Back products</button>

<EditForm Model="@product" OnSubmit="@Save">
    <div class="row">
        <div class="col-8 form-group">
            <label for="title" class="col-form-label">Title</label>
            <InputText id="title" @bind-Value="product.Title" required class="form-control" />
        </div>
        <div class="col form-group">
            <label for="price" class="col-form-label">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" min="0" required class="form-control" />
        </div>
    </div>
    <div class="row">

    <div class="col-8 form-group">
        <label for="category" class="col-form-label">Category</label>
        <InputSelect id="category" @bind-Value="categoryName" required class="form-control" >
            <option>Select Category...</option>
            @foreach (var category in categories)
            {
                <option value="@category.Name">@category.Name</option>
            }
        </InputSelect>
    </div>
    <div class="col form-group">
        <label for="image" class="col-form-label">Image (Url)</label>
        <InputText id="image" @bind-Value="Image" required class="form-control" />
    </div>
</div>
<div class="form-group">
    <label for="description" class="col-form-label">Description</label>
    <InputTextArea id="description" @bind-Value="product.Description" required class="form-control" />
</div>

<hr>
<button class="btn btn-primary" type="submit">Save</button>

</EditForm>
@code
{
    [Parameter]
    public int Id { get; set; }
    private Product product = new();
    private List<Category> categories = new List<Category>();
    private string Image { get; set; }
    private string categoryName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryService.Get();
        product = await productService.GetById(Id);  

        Image = product.Images[0];
        categoryName = categories.Where(c => c.Id == product.CategoryId).Select(c => c.Name).FirstOrDefault();
    }
    private bool IsValidUrl(string url)
    {
        if (string.IsNullOrWhiteSpace(url))
            return false;

        try
        {
            var uri = new Uri(url);
            return uri.IsAbsoluteUri;
        }
        catch
        {
            return false;
        }
    }

    private async Task Save()
    {
        try
        {
            if (!IsValidUrl(Image))
            {
                toastService.ShowError("You must enter a valid URL for the image.");
                return;
            }
            product.Images = new string[1] { Image };
            // * NOTA: la api no permite actualizar la categoria del producto.
            await productService.Update(Id, product);
            toastService.ShowSuccess("Product Updated");
            //suponiendo q todo ocurrio bn
            NavigationManager.NavigateTo("/product");
        }
        catch (System.Exception)
        {
            toastService.ShowError("Enter the fields correctly");
        }
    }
}




