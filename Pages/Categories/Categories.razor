@page "/category"
@inject ILogger<Categories> logger;
@inject ICategoryService categoryService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;
@inject IToastService toastService;

<PageTitle>Categories</PageTitle>

<ModuleTitle Title="Categories" />
<button class="btn btn-primary mb-4" @onclick="@(() => NavigationManager.NavigateTo("/addcategory"))">Add Category</button>

@if (categories?.Count > 0)
{
    <div class="categories-container">
        @foreach (var category in categories)
        {
            <div class="card">
                <img class="card-img-top" src="@category.Image" alt="Category" loading="lazy" width="270" height="210" />
                <div class="card-body">
                    <h4><b>@category.Name</b></h4>
                    <button title="Eliminar" class="btn btn-danger btn-delete" @onclick="@(()=>DeleteCategory(category))"><span
                    class="oi oi-trash"></span></button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>There are no categories to display</p>
}

@code
{
    private List<Category>? categories;  // puede ser nulo

    protected override async Task OnInitializedAsync()
    {//OnInitializedAsync: se encarga de asignar los datos iniciales que se vana  mostrar en el componente
        await GetCategories();
    }

    //este metodo devuelve una lista de categorias
    private async Task GetCategories()
    {
        categories = await categoryService.Get();
    }

    private async Task  DeleteCategory(Category category)
    {
        // esta alerta viene de JS. Librerias, componentes de js igual lo podemos invocar
        if(!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove {category.Name}"))
            return;
        
        await categoryService.Delete(category.Id);
        toastService.ShowSuccess("Category removed");
        await GetCategories();
    }

}